@page "/design"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>MindfulMuse - Design</PageTitle>

<div class="design-module">
    <header class="module-header">
        <div class="container">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h1 class="mb-1">üé® Design Studio</h1>
                    <p class="text-muted mb-0">Create visual inspiration and extract color palettes</p>
                </div>
                <button class="btn btn-outline-light" @onclick="NavigateHome">
                    <i class="bi bi-house"></i> Home
                </button>
            </div>
        </div>
    </header>

    <div class="container mt-4">
        <div class="row">
            <div class="col-lg-8">
                <!-- Image Upload and Processing -->
                <div class="image-processing-section mb-4">
                    <div class="section-header">
                        <h4>üñºÔ∏è Image Processing</h4>
                        <small class="text-muted">Upload images to extract color palettes and create mood boards</small>
                    </div>

                    <div class="upload-area">
                        <input type="file" id="imageInput" @ref="ImageInputRef" accept="image/*" @onchange="HandleImageUpload" multiple style="display: none;" />
                        <div class="upload-zone" @onclick="TriggerFileUpload">
                            <div class="upload-content">
                                <i class="bi bi-cloud-upload display-4 text-muted"></i>
                                <h5 class="mt-3">Drop images here or click to upload</h5>
                                <p class="text-muted">Supports JPG, PNG, GIF (max 10MB each)</p>
                                <button class="btn btn-primary">Choose Images</button>
                            </div>
                        </div>
                    </div>

                    @if (UploadedImages.Any())
                    {
                        <div class="uploaded-images mt-3">
                            <h6>Uploaded Images:</h6>
                            <div class="image-grid">
                                @foreach (var image in UploadedImages)
                                {
                                    <div class="image-item">
                                        <img src="@image.Url" alt="@image.Name" @onclick="() => SelectImage(image)" />
                                        <div class="image-overlay">
                                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveImage(image)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                            <button class="btn btn-sm btn-info" @onclick="() => ExtractPalette(image)">
                                                <i class="bi bi-palette"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                <!-- Color Palette Display -->
                <div class="color-palette-section mb-4">
                    <div class="section-header">
                        <h4>üé® Color Palette</h4>
                        <small class="text-muted">Extracted colors from your uploaded images</small>
                    </div>

                    <div class="palette-display">
                        @if (CurrentPalette.Any())
                        {
                            <div class="palette-colors">
                                @foreach (var color in CurrentPalette)
                                {
                                    <div class="color-swatch" style="background-color: @(color.Hex ?? "#ffffff");"
                                         @onclick="@(() => CopyColorToClipboard(color.Hex ?? "#ffffff"))">
                                        <div class="color-info">
                                            <span class="color-hex">@color.Hex</span>
                                            <span class="color-name">@color.Name</span>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="palette-actions mt-3">
                                <button class="btn btn-outline-primary me-2" @onclick="SavePalette">
                                    <i class="bi bi-bookmark"></i> Save Palette
                                </button>
                                <button class="btn btn-outline-success me-2" @onclick="ExportPalette">
                                    <i class="bi bi-download"></i> Export
                                </button>
                                <button class="btn btn-outline-info" @onclick="GenerateComplementary">
                                    <i class="bi bi-plus-circle"></i> Generate Complementary
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="empty-palette">
                                <i class="bi bi-palette display-4 text-muted"></i>
                                <h5 class="mt-3 text-muted">No colors extracted yet</h5>
                                <p class="text-muted">Upload an image and click the palette icon to extract colors</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Mood Board Canvas -->
                <div class="mood-board-section">
                    <div class="section-header">
                        <h4>üìå Mood Board</h4>
                        <small class="text-muted">Create visual mood boards for your design inspiration</small>
                    </div>

                    <div class="mood-board-container">
                        <div id="moodBoardCanvas" style="width: 100%; height: 500px; border: 2px dashed #dee2e6; border-radius: 10px; background: white; position: relative;">
                            <div class="canvas-placeholder">
                                <i class="bi bi-easel display-4 text-muted"></i>
                                <h5 class="mt-3 text-muted">Your mood board canvas</h5>
                                <p class="text-muted">Drag and drop images here to create your mood board</p>
                            </div>
                        </div>

                        <div class="canvas-tools mt-3">
                            <div class="btn-group me-2" role="group">
                                <button class="btn btn-outline-secondary btn-sm" @onclick="UndoAction">
                                    <i class="bi bi-arrow-counterclockwise"></i> Undo
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="RedoAction">
                                    <i class="bi bi-arrow-clockwise"></i> Redo
                                </button>
                            </div>
                            <button class="btn btn-outline-danger btn-sm me-2" @onclick="ClearCanvas">
                                <i class="bi bi-trash"></i> Clear
                            </button>
                            <button class="btn btn-outline-success btn-sm" @onclick="ExportMoodBoard">
                                <i class="bi bi-download"></i> Export
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- AI Design Assistant -->
                <div class="ai-design-panel mb-3">
                    <h5 class="panel-title">üé® AI Design Assistant</h5>

                    <div class="design-prompt-area">
                        <textarea class="form-control" rows="4" placeholder="Describe your design vision, mood, or style..."
                                  @bind="DesignPrompt" @bind:event="oninput"></textarea>
                        <button class="btn btn-primary w-100 mt-2" @onclick="GenerateDesignIdea">
                            Generate Design Idea
                        </button>
                    </div>

                    <div class="design-suggestions mt-3">
                        <h6>Design Suggestions:</h6>
                        <div class="suggestion-item">
                            @DesignSuggestion
                        </div>
                    </div>
                </div>

                <!-- Saved Palettes -->
                <div class="saved-palettes mb-3">
                    <h6>Saved Palettes:</h6>
                    <div class="palette-list">
                        @if (SavedPalettes.Any())
                        {
                            @foreach (var palette in SavedPalettes)
                            {
                                <div class="palette-item" @onclick="() => LoadPalette(palette)">
                                    <div class="palette-preview">
                                        @if (palette.Colors != null)
                                        {
                                            @foreach (var color in palette.Colors.Take(4))
                                            {
                                                <div class="mini-swatch" style="background-color: @(color.Hex ?? "#ffffff");"></div>
                                            }
                                        }
                                    </div>
                                    <div class="palette-info">
                                        <small class="palette-name">@palette.Name</small>
                                        <small class="text-muted">@(palette.Colors?.Count ?? 0) colors</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted small">No saved palettes yet</p>
                        }
                    </div>
                </div>

                <!-- Design Inspiration Gallery -->
                <div class="inspiration-gallery">
                    <h6>üí° Design Inspiration:</h6>
                    <div class="inspiration-grid">
                        <div class="inspiration-item" @onclick="LoadInspirationPalette">
                            <div class="inspiration-colors">
                                <div class="mini-swatch" style="background-color: #FF6B6B;"></div>
                                <div class="mini-swatch" style="background-color: #4ECDC4;"></div>
                                <div class="mini-swatch" style="background-color: #45B7D1;"></div>
                                <div class="mini-swatch" style="background-color: #FFA07A;"></div>
                            </div>
                            <small>Playful & Vibrant</small>
                        </div>

                        <div class="inspiration-item" @onclick="LoadInspirationPalette">
                            <div class="mini-swatch" style="background-color: #2C3E50;"></div>
                            <div class="mini-swatch" style="background-color: #E74C3C;"></div>
                            <div class="mini-swatch" style="background-color: #ECF0F1;"></div>
                            <div class="mini-swatch" style="background-color: #3498DB;"></div>
                            <small>Modern & Professional</small>
                        </div>

                        <div class="inspiration-item" @onclick="LoadInspirationPalette">
                            <div class="mini-swatch" style="background-color: #8B4513;"></div>
                            <div class="mini-swatch" style="background-color: #DEB887;"></div>
                            <div class="mini-swatch" style="background-color: #F5F5DC;"></div>
                            <div class="mini-swatch" style="background-color: #556B2F;"></div>
                            <small>Earthy & Natural</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ElementReference ImageInputRef;
    private List<UploadedImage> UploadedImages { get; set; } = new();
    private List<ColorInfo> CurrentPalette { get; set; } = new();
    private string DesignPrompt { get; set; } = "";
    private string DesignSuggestion { get; set; } = "Your design suggestions will appear here.";
    private List<SavedPalette> SavedPalettes { get; set; } = new();

    private class UploadedImage
    {
        public string? Url { get; set; }
        public string? Name { get; set; }
        public long Size { get; set; }
    }

    private class ColorInfo
    {
        public string? Hex { get; set; }
        public string? Name { get; set; }
        public int R { get; set; }
        public int G { get; set; }
        public int B { get; set; }
    }

    private class SavedPalette
    {
        public string? Name { get; set; }
        public List<ColorInfo>? Colors { get; set; }
    }

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void TriggerFileUpload()
    {
        ImageInputRef.FocusAsync();
    }

    private async Task HandleImageUpload()
    {
        var files = await JSRuntime.InvokeAsync<string[]>("getSelectedFiles", "imageInput");
        foreach (var file in files)
        {
            var imageUrl = await JSRuntime.InvokeAsync<string>("createImageUrl", file);
            UploadedImages.Add(new UploadedImage
            {
                Url = imageUrl,
                Name = Path.GetFileName(file),
                Size = 0 // Would get actual file size in real implementation
            });
        }
        StateHasChanged();
    }

    private void SelectImage(UploadedImage image)
    {
        // Handle image selection for mood board
    }

    private async Task RemoveImage(UploadedImage image)
    {
        UploadedImages.Remove(image);
        await JSRuntime.InvokeVoidAsync("revokeImageUrl", image.Url);
        StateHasChanged();
    }

    private async Task ExtractPalette(UploadedImage image)
    {
        CurrentPalette = await JSRuntime.InvokeAsync<List<ColorInfo>>("extractColorsFromImage", image.Url);
        StateHasChanged();
    }

    private async Task CopyColorToClipboard(string hexColor)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", hexColor);
        // Show success message
    }

    private void SavePalette()
    {
        if (CurrentPalette.Any())
        {
            var paletteName = $"Palette {SavedPalettes.Count + 1}";
            SavedPalettes.Add(new SavedPalette
            {
                Name = paletteName,
                Colors = new List<ColorInfo>(CurrentPalette)
            });
            StateHasChanged();
        }
    }

    private async Task ExportPalette()
    {
        await JSRuntime.InvokeVoidAsync("exportPaletteToJSON", CurrentPalette);
    }

    private async Task GenerateComplementary()
    {
        CurrentPalette = await JSRuntime.InvokeAsync<List<ColorInfo>>("generateComplementaryColors", CurrentPalette);
        StateHasChanged();
    }

    private void GenerateDesignIdea()
    {
        if (string.IsNullOrWhiteSpace(DesignPrompt))
            return;

        DesignSuggestion = $"Based on '{DesignPrompt}': Consider using a warm color palette with organic shapes and plenty of white space. Focus on typography hierarchy and subtle animations to guide the user's attention.";
        StateHasChanged();
    }

    private void LoadPalette(SavedPalette palette)
    {
        CurrentPalette = palette.Colors != null ? new List<ColorInfo>(palette.Colors) : new List<ColorInfo>();
        StateHasChanged();
    }

    private void LoadInspirationPalette()
    {
        // Load a predefined inspiration palette
        CurrentPalette = new List<ColorInfo>
        {
            new ColorInfo { Hex = "#FF6B6B", Name = "Coral Red" },
            new ColorInfo { Hex = "#4ECDC4", Name = "Turquoise" },
            new ColorInfo { Hex = "#45B7D1", Name = "Sky Blue" },
            new ColorInfo { Hex = "#FFA07A", Name = "Light Salmon" },
            new ColorInfo { Hex = "#98D8C8", Name = "Mint Green" }
        };
        StateHasChanged();
    }

    private async Task UndoAction()
    {
        await JSRuntime.InvokeVoidAsync("undoMoodBoardAction");
    }

    private async Task RedoAction()
    {
        await JSRuntime.InvokeVoidAsync("redoMoodBoardAction");
    }

    private async Task ClearCanvas()
    {
        await JSRuntime.InvokeVoidAsync("clearMoodBoard");
    }

    private async Task ExportMoodBoard()
    {
        await JSRuntime.InvokeVoidAsync("exportMoodBoard");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMoodBoard");
            await JSRuntime.InvokeVoidAsync("initializeVibrant");
        }
    }
}
